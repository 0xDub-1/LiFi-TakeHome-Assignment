services:
  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: lifi-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: lifi-fee-collector
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - lifi-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # LI.FI Scanner Application
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lifi-scanner
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      # MongoDB Configuration
      MONGODB_URI: mongodb://mongodb:27017/lifi-fee-collector
      
      # Blockchain Configuration
      CHAIN_NAME: ${CHAIN_NAME:-polygon}
      RPC_URL: ${RPC_URL:-}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL:-https://polygon-rpc.com}
      FEE_COLLECTOR_CONTRACT_ADDRESS: ${FEE_COLLECTOR_CONTRACT_ADDRESS:-0xbD6C7B0d2f68c2b7805d88388319cfB6EcB50eA9}
      OLDEST_BLOCK: ${OLDEST_BLOCK:-77000000}
      
      # Scanner Configuration
      SCAN_INTERVAL_MS: ${SCAN_INTERVAL_MS:-60000}
      BLOCKS_PER_BATCH: ${BLOCKS_PER_BATCH:-100}
      
      # API Configuration
      API_PORT: 3000
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - lifi-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

networks:
  lifi-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

